How Java Works?

To develop an application, you need JDK for compiling. But what about deploying on the client side?

We use JRE or Java Runtime Environment and JVM or Java Virtual Machine to deploy

JDK has
JRE 
which has 
JVM 

JVM has a heap memory which has all the objects.
For every method created, a stack will be created.

new <Constructor()> will create a object in the memory

Your ref var that you created is in the main memory's stack. It's address is in the heap memory which is what be assigned to the ref var in the stack.

If you use the same constructor of the same class meaning you instantiate two variables of the same class, two objects are created in the heap memory for each reference variable in the stack.

Thus, we have a fixed shape stack and expendable heap shape.   (Not size)

Every method will have it's own stack,

Making an instance variable static means storing outside the individual objects meaning making it available to every object created of that class. A global variable in a sense. Thus, you can also access the variable with just the className.

Keyboard.brand

Thus, static variables also don't need objects to be called.

Hence, the main method is static. main() is the starting point of execution/ the entry point in Java. If it's not static, it will we will need to object to call the main function. But, you will need the main function to create a object. Thus, it would be a deadlock. So, we need to make the main function static.

Every instance variable will have a copy in the heap memory
Local go in to stack

Every time you compile a Java file, it will create n class files where n is the number of classes. These class files or bytecode are run by the JVM. Hence, Java is a platform independent language. Wherever you have JVM, you can run Java.